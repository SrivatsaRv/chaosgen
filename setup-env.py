#!/usr/bin/env python3
"""
ChaosGen Environment Setup Script

Interactive script to help users create their .env file with proper configuration.
"""

import os
from pathlib import Path


def main():
    print("üîß ChaosGen Environment Setup")
    print("=" * 50)
    print()

    # Check if .env already exists
    env_file = Path(".env")
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if response != "y":
            print("Setup cancelled.")
            return

    print("Let's configure your ChaosGen environment:")
    print()

    # LLM Provider selection
    print("1. LLM Provider Configuration")
    print("   Choose your preferred LLM provider:")
    print("   - 'openai' for OpenAI GPT models")
    print("   - 'gemini' for Google Gemini models")
    print("   - Leave empty for auto-detection")

    provider = input("   Provider (openai/gemini/auto): ").strip().lower()
    if provider == "auto":
        provider = ""

    # API Keys
    print()
    print("2. API Keys")
    print("   Enter your API keys (you can leave empty if not using that provider):")

    openai_key = input("   OpenAI API Key: ").strip()
    gemini_key = input("   Google Gemini API Key: ").strip()

    # Model selection
    print()
    print("3. Model Configuration")
    print("   Choose your preferred model (leave empty for defaults):")
    print("   - OpenAI: gpt-3.5-turbo, gpt-4, gpt-4o")
    print("   - Gemini: gemini-1.5-flash, gemini-1.5-pro")

    model = input("   Model: ").strip()

    # Mock mode
    print()
    print("4. Mock Mode")
    print("   Enable mock mode for testing without API calls?")
    mock_mode = input("   Mock mode (true/false) [false]: ").strip().lower()
    if not mock_mode:
        mock_mode = "false"

    # Generate .env content
    env_content = f"""# ChaosGen Environment Configuration
# Generated by setup-env.py

# LLM Provider Configuration
CHAOSGEN_LLM_PROVIDER={provider}

# API Keys
OPENAI_API_KEY={openai_key}
GOOGLE_API_KEY={gemini_key}

# LLM Model Configuration
CHAOSGEN_LLM_MODEL={model}

# Mock Mode
CHAOSGEN_MOCK_MODE={mock_mode}

# Additional Configuration (uncomment and modify as needed)
# KUBECONFIG=~/.kube/config
# LOG_LEVEL=INFO
"""

    # Write .env file
    try:
        with open(env_file, "w") as f:
            f.write(env_content)

        print()
        print("‚úÖ .env file created successfully!")
        print(f"üìÅ Location: {env_file.absolute()}")
        print()
        print("Next steps:")
        print("1. Edit the .env file if needed")
        print("2. Run: python craterctl.py check-llm")
        print("3. Run: python craterctl.py suggest --dry-run")

    except Exception as e:
        print(f"‚ùå Failed to create .env file: {e}")


if __name__ == "__main__":
    main()
