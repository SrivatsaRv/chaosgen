---
# Sock Shop Complete Deployment
# This file contains all the microservices for the Sock Shop application
# Optimized for chaos engineering experiments

apiVersion: v1
kind: Namespace
metadata:
  name: sock-shop
  labels:
    name: sock-shop
---
# Frontend Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end
  namespace: sock-shop
  labels:
    app: front-end
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: front-end
  template:
    metadata:
      labels:
        app: front-end
        tier: frontend
    spec:
      containers:
      - name: front-end
        image: weaveworksdemos/front-end:0.4.12
        ports:
        - containerPort: 8079
        env:
        - name: CATALOGUE_HOST
          value: "catalogue"
        - name: CART_HOST
          value: "carts"
        - name: ORDERS_HOST
          value: "orders"
        - name: USER_HOST
          value: "user"
        - name: PAYMENT_HOST
          value: "payment"
        - name: SHIPPING_HOST
          value: "shipping"
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
        livenessProbe:
          httpGet:
            path: /
            port: 8079
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8079
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: front-end
  namespace: sock-shop
  labels:
    app: front-end
    tier: frontend
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8079
    protocol: TCP
  selector:
    app: front-end
---
# Catalogue Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue
  namespace: sock-shop
  labels:
    app: catalogue
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: catalogue
  template:
    metadata:
      labels:
        app: catalogue
        tier: backend
    spec:
      containers:
      - name: catalogue
        image: weaveworksdemos/catalogue:0.3.0
        ports:
        - containerPort: 80
        env:
        - name: DB_HOST
          value: "catalogue-db"
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue
  namespace: sock-shop
  labels:
    app: catalogue
    tier: backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: catalogue
---
# Catalogue Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogue-db
  namespace: sock-shop
  labels:
    app: catalogue-db
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: catalogue-db
  template:
    metadata:
      labels:
        app: catalogue-db
        tier: database
    spec:
      containers:
      - name: catalogue-db
        image: weaveworksdemos/catalogue-db:0.3.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_HOST
          value: "localhost"
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue-db
  namespace: sock-shop
  labels:
    app: catalogue-db
    tier: database
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
  selector:
    app: catalogue-db
---
# Carts Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  namespace: sock-shop
  labels:
    app: carts
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: carts
  template:
    metadata:
      labels:
        app: carts
        tier: backend
    spec:
      containers:
      - name: carts
        image: weaveworksdemos/carts:0.4.8
        ports:
        - containerPort: 80
        env:
        - name: REDIS_HOST
          value: "carts-db"
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: carts
  namespace: sock-shop
  labels:
    app: carts
    tier: backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: carts
---
# Carts Database (Redis)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-db
  namespace: sock-shop
  labels:
    app: carts-db
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: carts-db
  template:
    metadata:
      labels:
        app: carts-db
        tier: database
    spec:
      containers:
      - name: carts-db
        image: redis:alpine
        ports:
        - containerPort: 6379
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: carts-db
  namespace: sock-shop
  labels:
    app: carts-db
    tier: database
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app: carts-db
---
# Orders Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders
  namespace: sock-shop
  labels:
    app: orders
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: orders
  template:
    metadata:
      labels:
        app: orders
        tier: backend
    spec:
      containers:
      - name: orders
        image: weaveworksdemos/orders:0.4.7
        ports:
        - containerPort: 80
        env:
        - name: DB_HOST
          value: "orders-db"
        - name: PAYMENT_HOST
          value: "payment"
        - name: SHIPPING_HOST
          value: "shipping"
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: orders
  namespace: sock-shop
  labels:
    app: orders
    tier: backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: orders
---
# Orders Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-db
  namespace: sock-shop
  labels:
    app: orders-db
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orders-db
  template:
    metadata:
      labels:
        app: orders-db
        tier: database
    spec:
      containers:
      - name: orders-db
        image: weaveworksdemos/orders-db:0.4.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_HOST
          value: "localhost"
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: orders-db
  namespace: sock-shop
  labels:
    app: orders-db
    tier: database
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
  selector:
    app: orders-db
---
# User Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user
  namespace: sock-shop
  labels:
    app: user
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user
  template:
    metadata:
      labels:
        app: user
        tier: backend
    spec:
      containers:
      - name: user
        image: weaveworksdemos/user:0.4.7
        ports:
        - containerPort: 80
        env:
        - name: DB_HOST
          value: "user-db"
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: user
  namespace: sock-shop
  labels:
    app: user
    tier: backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: user
---
# User Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-db
  namespace: sock-shop
  labels:
    app: user-db
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-db
  template:
    metadata:
      labels:
        app: user-db
        tier: database
    spec:
      containers:
      - name: user-db
        image: weaveworksdemos/user-db:0.4.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_HOST
          value: "localhost"
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: user-db
  namespace: sock-shop
  labels:
    app: user-db
    tier: database
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
  selector:
    app: user-db
---
# Payment Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
  namespace: sock-shop
  labels:
    app: payment
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: payment
  template:
    metadata:
      labels:
        app: payment
        tier: backend
    spec:
      containers:
      - name: payment
        image: weaveworksdemos/payment:0.4.3
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: payment
  namespace: sock-shop
  labels:
    app: payment
    tier: backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: payment
---
# Shipping Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
  namespace: sock-shop
  labels:
    app: shipping
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shipping
  template:
    metadata:
      labels:
        app: shipping
        tier: backend
    spec:
      containers:
      - name: shipping
        image: weaveworksdemos/shipping:0.4.3
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: shipping
  namespace: sock-shop
  labels:
    app: shipping
    tier: backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: shipping
---
# Queue Master Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: queue-master
  namespace: sock-shop
  labels:
    app: queue-master
    tier: queue
spec:
  replicas: 1
  selector:
    matchLabels:
      app: queue-master
  template:
    metadata:
      labels:
        app: queue-master
        tier: queue
    spec:
      containers:
      - name: queue-master
        image: weaveworksdemos/queue-master:0.3.0
        ports:
        - containerPort: 80
        env:
        - name: RABBITMQ_HOST
          value: "rabbitmq"
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: queue-master
  namespace: sock-shop
  labels:
    app: queue-master
    tier: queue
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  selector:
    app: queue-master
---
# RabbitMQ Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: sock-shop
  labels:
    app: rabbitmq
    tier: queue
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
        tier: queue
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management
        ports:
        - containerPort: 5672
        - containerPort: 15672
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: "guest"
        - name: RABBITMQ_DEFAULT_PASS
          value: "guest"
        resources:
          limits:
            cpu: "200m"
            memory: "200Mi"
          requests:
            cpu: "100m"
            memory: "100Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: sock-shop
  labels:
    app: rabbitmq
    tier: queue
spec:
  type: ClusterIP
  ports:
  - name: amqp
    port: 5672
    targetPort: 5672
    protocol: TCP
  - name: management
    port: 15672
    targetPort: 15672
    protocol: TCP
  selector:
    app: rabbitmq 